[{"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\index.tsx":"1","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\serviceWorker.ts":"2","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\App.tsx":"3","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\pages\\Index.tsx":"4","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\templates\\Main.tsx":"5","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\organisms\\Sidebar.tsx":"6","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\organisms\\QuestionDetailsPanel.tsx":"7","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\QuestionList.tsx":"8","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\QuestionListItem.tsx":"9","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\BasicStats.tsx":"10","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\AnswerList.tsx":"11","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\EditButton.tsx":"12","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\ChoiceList.tsx":"13","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\AnswerListItem.tsx":"14","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\BasicStatsItem.tsx":"15","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\ChoiceListItem.tsx":"16","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\Body.tsx":"17","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\utils\\ScrollableList.tsx":"18","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\utils\\TwoColumnCard.tsx":"19","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\ActionPanel.tsx":"20","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\QuestionTitle.tsx":"21","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\organisms\\CrossTabPanel.tsx":"22","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\CrossTabQuestions.tsx":"23","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\ActionTrigger.tsx":"24","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\HeatMapPanel.tsx":"25","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\utils\\getBasicStats.tsx":"26","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\localState\\index.ts":"27","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\LoadingScreen.tsx":"28","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\LoadedScreen.tsx":"29","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\ExplorePanel.tsx":"30","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\Footer.tsx":"31","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\QuestionSearch.tsx":"32","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\TH.tsx":"33"},{"size":452,"mtime":1607086848000,"results":"34","hashOfConfig":"35"},{"size":5206,"mtime":1607089658882,"results":"36","hashOfConfig":"35"},{"size":744,"mtime":1608065675080,"results":"37","hashOfConfig":"35"},{"size":479,"mtime":1608235987480,"results":"38","hashOfConfig":"35"},{"size":2083,"mtime":1608230825478,"results":"39","hashOfConfig":"35"},{"size":2448,"mtime":1608236405774,"results":"40","hashOfConfig":"35"},{"size":3378,"mtime":1608230840613,"results":"41","hashOfConfig":"35"},{"size":4214,"mtime":1608236969707,"results":"42","hashOfConfig":"35"},{"size":3716,"mtime":1608120303898,"results":"43","hashOfConfig":"35"},{"size":1175,"mtime":1608062602851,"results":"44","hashOfConfig":"35"},{"size":6218,"mtime":1608236970080,"results":"45","hashOfConfig":"35"},{"size":1654,"mtime":1608123767548,"results":"46","hashOfConfig":"35"},{"size":3119,"mtime":1608212058650,"results":"47","hashOfConfig":"35"},{"size":2394,"mtime":1608231427607,"results":"48","hashOfConfig":"35"},{"size":1064,"mtime":1607842013363,"results":"49","hashOfConfig":"35"},{"size":1774,"mtime":1608213850760,"results":"50","hashOfConfig":"35"},{"size":243,"mtime":1607836096598,"results":"51","hashOfConfig":"35"},{"size":641,"mtime":1607889466487,"results":"52","hashOfConfig":"35"},{"size":809,"mtime":1608064210839,"results":"53","hashOfConfig":"35"},{"size":1495,"mtime":1608231545529,"results":"54","hashOfConfig":"35"},{"size":1842,"mtime":1608230107732,"results":"55","hashOfConfig":"35"},{"size":3494,"mtime":1608235609594,"results":"56","hashOfConfig":"35"},{"size":1554,"mtime":1608233168692,"results":"57","hashOfConfig":"35"},{"size":2148,"mtime":1608110364826,"results":"58","hashOfConfig":"35"},{"size":4586,"mtime":1608236969864,"results":"59","hashOfConfig":"35"},{"size":211,"mtime":1608055954815,"results":"60","hashOfConfig":"35"},{"size":1862,"mtime":1608235941520,"results":"61","hashOfConfig":"35"},{"size":1394,"mtime":1608124401601,"results":"62","hashOfConfig":"35"},{"size":903,"mtime":1608124456468,"results":"63","hashOfConfig":"35"},{"size":2457,"mtime":1608110148874,"results":"64","hashOfConfig":"35"},{"size":226,"mtime":1607321277456,"results":"65","hashOfConfig":"66"},{"size":1129,"mtime":1608110925467,"results":"67","hashOfConfig":"35"},{"size":1962,"mtime":1608218311534,"results":"68","hashOfConfig":"35"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"8ee5wv",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"71"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"71"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"71"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"71"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"71"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"71"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"71"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"71"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lml4fe",{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\index.tsx",[],["145","146"],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\serviceWorker.ts",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\App.tsx",["147"],"import React from 'react';\nimport './App.css';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n  HttpLink,\n  ApolloProvider,\n  makeVar,\n} from '@apollo/client';\nimport Index from './pages/Index';\nimport { hot } from 'react-hot-loader';\nimport { fields } from './localState';\n\nconst cache = new InMemoryCache({\n  resultCaching: true,\n  typePolicies: {\n    Query: {\n      fields,\n    },\n  },\n});\nconst link = new HttpLink({\n  uri: 'http://localhost:4000/graphql',\n});\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  resolvers: {},\n  link,\n});\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Index />\n    </ApolloProvider>\n  );\n};\n\nexport default hot(module)(App);\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\pages\\Index.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\templates\\Main.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\organisms\\Sidebar.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\organisms\\QuestionDetailsPanel.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\QuestionList.tsx",["148","149"],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\QuestionListItem.tsx",["150","151","152"],"import React, { useRef } from 'react';\nimport { Flex, Header, Heading, Text, View } from '@adobe/react-spectrum';\nimport { useButton, usePress } from 'react-aria';\nimport {\n  isLoadingVar,\n  queryForQuestionVar,\n  selectedActionVar,\n  selectedQuestionForCrossTabVar,\n  selectedQuestionVar,\n} from '../../localState';\nimport { useReactiveVar } from '@apollo/client';\nimport Checkmark from '@spectrum-icons/workflow/Checkmark';\n\ntype PropsBase = {\n  id?: string;\n  size?: number;\n  name?: string | null;\n  text?: string;\n  level?: number;\n  children?: Props[];\n  isSearched?: boolean;\n};\nexport const defaultValue = {\n  id: '',\n  size: 12,\n  name: 'no name',\n  text: 'no text',\n  level: 0,\n  children: [],\n  isSearched: false,\n};\nconst PropsDefault: Required<\n  Pick<PropsBase, { [Key in keyof PropsBase]-?: Key }[keyof PropsBase]>\n> = defaultValue;\ntype Props = PropsBase & typeof PropsDefault;\n\nexport { defaultValue as listItemDefaultValue };\nexport type ListItemProps = Props;\n\nexport const QuestionListItem: React.FC<PropsBase> = (_props: PropsBase) => {\n  const props = (defaultValue && _props) as Props;\n  const ref = useRef(null);\n  const { pressProps, isPressed } = usePress({\n    onPressEnd: () => {\n      if (isSelectingSecondary) {\n        selectedQuestionForCrossTabVar(props.id);\n        isLoadingVar({ ...isLoadingVar(), crossTab: true });\n      } else {\n        selectedQuestionVar(props.id);\n        isLoadingVar({ ...isLoadingVar(), panel: true });\n      }\n    },\n  });\n\n  const selectedQuestion = useReactiveVar(selectedQuestionVar);\n  const selectedQuestionForCrossTab = useReactiveVar(\n    selectedQuestionForCrossTabVar\n  );\n  const selectedAction = useReactiveVar(selectedActionVar);\n  const isSelectingSecondary = selectedAction === 'CrossTab';\n\n  return (\n    <Flex direction={'column'}>\n      <View padding={'size-25'}>\n        <View\n          backgroundColor={\n            selectedQuestion === props.id ||\n            selectedQuestionForCrossTab === props.id\n              ? 'gray-500'\n              : 'transparent'\n          }\n          borderRadius={'small'}\n        >\n          <div\n            {...pressProps}\n            ref={ref}\n            style={{\n              background: isPressed ? 'rgba(0,0,0,0.2)' : 'rgba(255,255,255,0)',\n              padding: '0.2rem',\n              paddingLeft: '0.5rem',\n              cursor: 'pointer',\n            }}\n            role={'gridcell'}\n          >\n            <Flex alignItems={'center'} columnGap={'size-100'}>\n              <Header\n                margin={0}\n                marginStart={`size-${props.level}00`}\n                UNSAFE_style={{\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {props.name}\n              </Header>\n              <Text\n                marginStart={`size-${props.level}00`}\n                UNSAFE_style={{\n                  opacity: 0.6,\n                  whiteSpace: 'nowrap',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                }}\n              >\n                {props.text}\n              </Text>\n              {selectedQuestion === props.id ? (\n                <Flex minWidth={'size-300'}>\n                  <Checkmark size={'S'} color={'positive'} />\n                </Flex>\n              ) : (\n                <></>\n              )}\n              {selectedQuestionForCrossTab === props.id ? (\n                <Flex minWidth={'size-300'}>\n                  <Checkmark size={'S'} color={'notice'} />\n                </Flex>\n              ) : (\n                <></>\n              )}\n            </Flex>\n          </div>\n        </View>\n      </View>\n    </Flex>\n  );\n};\nQuestionListItem.defaultProps = defaultValue;\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\BasicStats.tsx",["153"],"import { Flex } from '@adobe/react-spectrum';\nimport React from 'react';\nimport { BasicStatsItem, BasicStatsItemProps } from '../atoms/BasicStatsItem';\nimport { TwoColumnCard } from '../utils/TwoColumnCard';\n\ntype PropsBase = Object;\nexport const defaultValue = [];\nconst PropsDefault: Required<\n  Pick<PropsBase, { [Key in keyof PropsBase]-?: Key }[keyof PropsBase]>\n> = defaultValue;\ntype Props = PropsBase & typeof PropsDefault;\n\nexport { defaultValue as basicStatsDefaultValue };\nexport type BasicStatsProps = Props;\n\nexport const BasicStats: React.FC<PropsBase> = (_props: PropsBase) => {\n  const props = (defaultValue && _props) as Props;\n\n  const items = Object.entries(props).map(\n    (item: any): BasicStatsItemProps => ({\n      heading: item[0],\n      text: item[1],\n    })\n  );\n\n  return items.length > 0 ? (\n    <TwoColumnCard title={'Basic Info'}>\n      <Flex\n        gridArea={'contents'}\n        direction={'column'}\n        marginTop={'size-50'}\n        marginBottom={'size-50'}\n      >\n        {items.map((item) => (\n          <BasicStatsItem {...item} />\n        ))}\n      </Flex>\n    </TwoColumnCard>\n  ) : null;\n};\nBasicStats.defaultProps = defaultValue;\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\AnswerList.tsx",["154","155","156","157","158"],"import { Grid, Flex, Divider } from '@adobe/react-spectrum';\nimport { useReactiveVar } from '@apollo/client';\nimport Axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { Element } from '../../@types';\nimport {\n  filterVar,\n  isLoadingVar,\n  queryForChoiceVar,\n  sortByVar,\n} from '../../localState';\nimport { AnswerListItem } from '../atoms/AnswerListItem';\nimport { TH } from '../atoms/TH';\nimport { ScrollableList } from '../utils/ScrollableList';\nimport { TwoColumnCard } from '../utils/TwoColumnCard';\nimport { LoadedScreen } from './LoadedScreen';\n\ntype PropsBase = {\n  id: string | null;\n  elements: Element[];\n  isChoiceBased?: boolean;\n  isTextEntry?: boolean;\n};\nexport const defaultValue = {\n  id: null,\n  elements: [],\n  isChoiceBased: false,\n  isTextEntry: false,\n};\nconst PropsDefault: Required<\n  Pick<PropsBase, { [Key in keyof PropsBase]-?: Key }[keyof PropsBase]>\n> = defaultValue;\ntype Props = PropsBase & typeof PropsDefault;\n\nexport { defaultValue as answerListDefaultValue };\nexport type AnswerListProps = Props;\n\nexport const getItemDetails = (item: any) =>\n  JSON.stringify({\n    value: item.value,\n    label: item.label,\n    details: item.details,\n  });\n\nexport const AnswerList: React.FC<PropsBase> = (_props: PropsBase) => {\n  const props = (defaultValue && _props) as Props;\n  const sortBy = useReactiveVar(sortByVar);\n  const filter = useReactiveVar(filterVar);\n  const searchQuery = useReactiveVar(queryForChoiceVar);\n  const [searchedQuestions, setSearchedQuestions] = useState([] as any[]);\n\n  useEffect(() => {\n    if (searchQuery) {\n      isLoadingVar({ ...isLoadingVar(), choiceSearch: true });\n      Axios.get('http://localhost:7071/api/HttpTrigger3', {\n        params: {\n          id: props.id,\n          query: searchQuery,\n          isChoiceBased: props.isChoiceBased,\n          isTextEntry: props.isTextEntry,\n        },\n      }).then((response) => {\n        setSearchedQuestions(\n          response.data.map(\n            (item: any) =>\n              item[props.isChoiceBased ? 'choice' : 'answer'][\n                props.isTextEntry ? 'details' : 'label'\n              ]\n          )\n        );\n        isLoadingVar({ ...isLoadingVar(), choiceSearch: false });\n      });\n    }\n  }, [props.id, props.isChoiceBased, props.isTextEntry, searchQuery]);\n\n  const uniqueArray =\n    props.elements.length > 0\n      ? props.elements\n          .filter((item) => (props.isChoiceBased ? item.choice : item.answer))\n          .map((item) => (props.isChoiceBased ? item.choice : item.answer))\n          .filter(\n            (item, index, array) =>\n              array\n                .map((item) => getItemDetails(item))\n                .indexOf(getItemDetails(item)) === index\n          )\n          .map((item) => ({\n            ...item,\n            records: props.elements\n              .filter((item) =>\n                props.isChoiceBased ? item.choice : item.answer\n              )\n              .filter((element) =>\n                filter\n                  ? getItemDetails(\n                      props.isChoiceBased ? element.choice : element.answer\n                    ) === getItemDetails(item) &&\n                    element.choice.label === filter\n                  : getItemDetails(\n                      props.isChoiceBased ? element.choice : element.answer\n                    ) === getItemDetails(item)\n              )\n              .reduce((prev, curr) => [...prev, ...curr.records], [] as any[]),\n          }))\n          .filter((item) =>\n            searchedQuestions.length > 0\n              ? searchedQuestions.includes(\n                  props.isTextEntry ? item.details : item.label\n                )\n              : 1\n          )\n      : [];\n\n  const max = uniqueArray.reduce(\n    (prev: number, curr: { records: string | any[] }) =>\n      curr.records.length > prev ? curr.records.length : prev,\n    0\n  );\n\n  return (\n    <TwoColumnCard title={'Answers'}>\n      <Flex\n        gridArea={'contents'}\n        direction={'column'}\n        marginTop={'size-50'}\n        marginBottom={'size-50'}\n      >\n        <Grid\n          areas={['value  label  records', 'divider  divider  divider']}\n          columns={['size-1200', 'size-6000', 'auto']}\n          columnGap={'size-200'}\n        >\n          <TH label={'value'} target={'answer'} />\n          <TH label={'label'} target={'answer'} search />\n          <TH label={'records'} target={'answer'} />\n          <Divider size={'S'} gridArea={'divider'} />\n        </Grid>\n        <LoadedScreen loading={isLoadingVar()['choiceSearch']}>\n          <ScrollableList height={'30rem'}>\n            {uniqueArray.length > 0 ? (\n              uniqueArray\n                .sort((a, b) => {\n                  if (sortBy['answer']['by']) {\n                    const by = sortBy['answer'].by;\n                    const asc = sortBy['answer'].asc;\n                    if (by === 'value' || by === 'label') {\n                      return asc\n                        ? a[by] < b[by]\n                          ? -1\n                          : 1\n                        : a[by] > b[by]\n                        ? -1\n                        : 1;\n                    } else {\n                      return asc\n                        ? a['records'].length < b['records'].length\n                          ? -1\n                          : 1\n                        : a['records'].length > b['records'].length\n                        ? -1\n                        : 1;\n                    }\n                  } else {\n                    return 1;\n                  }\n                })\n                .map((answer) =>\n                  props.isTextEntry ? (\n                    <AnswerListItem\n                      contents={{\n                        ...answer,\n                        label: answer.details || 'no entry',\n                      }}\n                      max={max}\n                    />\n                  ) : (\n                    <AnswerListItem contents={answer} max={max} />\n                  )\n                )\n            ) : (\n              <></>\n            )}\n          </ScrollableList>\n        </LoadedScreen>\n      </Flex>\n    </TwoColumnCard>\n  );\n};\nAnswerList.defaultProps = defaultValue;\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\EditButton.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\ChoiceList.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\AnswerListItem.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\BasicStatsItem.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\ChoiceListItem.tsx",["159","160","161"],"import React, { useEffect } from 'react';\nimport {\n  Flex,\n  Grid,\n  Radio,\n  RadioGroup,\n  Switch,\n  Text,\n} from '@adobe/react-spectrum';\nimport { Choice, Element } from '../../@types';\nimport { filterVar } from '../../localState';\nimport { useReactiveVar } from '@apollo/client';\nimport { useState } from 'react';\n\ntype Props = {\n  contents: Choice;\n};\nexport const defaultValue = {\n  contents: { id: 'no id', value: 0, label: 'no text', records: [] },\n};\n\nexport const ChoiceListItem: React.FC<Props> = (props: Props) => {\n  const filter = useReactiveVar(filterVar);\n  const [isSelected, setIsSelected] = useState(false);\n\n  useEffect(() => setIsSelected(filter === props.contents.label), [\n    filter,\n    props.contents.label,\n  ]);\n\n  return (\n    <Grid\n      areas={['value  label  filter']}\n      columns={['size-1200', 'auto', 'size-2000']}\n      gap={'size-200'}\n    >\n      <Flex gridArea={'value'}>\n        <Text marginTop={'size-50'} marginBottom={'size-50'}>\n          {props.contents.value}\n        </Text>\n      </Flex>\n      <Flex gridArea={'label'}>\n        <Text\n          marginTop={'size-50'}\n          marginBottom={'size-50'}\n          UNSAFE_style={{\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          {props.contents.label}\n        </Text>\n      </Flex>\n      <Flex gridArea={'filter'} UNSAFE_style={{ cursor: 'pointer' }}>\n        <Switch\n          aria-label={props.contents.label}\n          isSelected={isSelected}\n          onChange={() => {\n            filterVar(\n              filter === props.contents.label ? null : props.contents.label\n            );\n          }}\n        />\n      </Flex>\n    </Grid>\n  );\n};\nChoiceListItem.defaultProps = defaultValue;\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\Body.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\utils\\ScrollableList.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\utils\\TwoColumnCard.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\ActionPanel.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\QuestionTitle.tsx",["162"],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\organisms\\CrossTabPanel.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\CrossTabQuestions.tsx",["163","164","165"],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\ActionTrigger.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\HeatMapPanel.tsx",["166","167","168","169"],"import { Grid, View } from '@adobe/react-spectrum';\nimport { gql, useQuery } from '@apollo/client';\nimport { ResponsiveHeatMap } from '@nivo/heatmap';\nimport React, { useEffect, useState } from 'react';\nimport { Element } from '../../@types';\nimport { isLoadingVar } from '../../localState';\nimport { TwoColumnCard } from '../utils/TwoColumnCard';\nimport { getItemDetails } from './AnswerList';\nimport { LoadedScreen } from './LoadedScreen';\n\ntype PropsBase = {\n  primaryElements: Element[];\n  secondaryElements: Element[];\n  primaryFilter: string | null;\n};\nexport const defaultValue = {\n  primaryElements: [],\n  secondaryElements: [],\n  primaryFilter: null,\n};\nconst PropsDefault: Required<\n  Pick<PropsBase, { [Key in keyof PropsBase]-?: Key }[keyof PropsBase]>\n> = defaultValue;\ntype Props = PropsBase & typeof PropsDefault;\n\nexport { defaultValue as heatMapPanelDefaultValue };\nexport type HeatMapPanelProps = Props;\n\nconst GET_CROSS_TAB_INFO = gql`\n  query($primaryElementIds: [String!]!, $secondaryElementIds: [String!]!) {\n    crossTabRecordInfo(\n      primaryElementIds: $primaryElementIds\n      secondaryElementIds: $secondaryElementIds\n    ) {\n      primaryId\n      secondaryId\n      records {\n        id\n      }\n    }\n  }\n`;\n\ntype CrossTabRecordInfo = {\n  primaryId: string;\n  secondaryId: string;\n  records: {\n    id: string;\n  }[];\n}[];\n\nconst useCrossTabData = (props: PropsBase, data: CrossTabRecordInfo) => {\n  const [crossTabData, setCrossTabData] = useState<any>();\n  const getLabel = (elements: Element[], id: string, isPrimary = true) => {\n    const element = elements.find((item) => item.id === id)?.[\n      isPrimary && props.primaryFilter ? 'answer' : 'choice'\n    ];\n    return element?.details ? element.details : element?.label || 'no label';\n  };\n\n  useEffect(() => {\n    if (data) {\n      const primaryIds = data\n        .map((item) => item.primaryId)\n        .filter((item, index, array) => array.indexOf(item) === index);\n      setCrossTabData(\n        primaryIds.map((id) => {\n          const array = data.filter((item) => item.primaryId === id);\n          return array.reduce(\n            (prev, curr) => ({\n              ...prev,\n              [getLabel(props.secondaryElements, curr.secondaryId, false)]: curr\n                .records.length,\n            }),\n            { primary: getLabel(props.primaryElements, id) }\n          );\n        })\n      );\n    }\n  }, [data]);\n\n  return crossTabData;\n};\n\nexport const HeatMapPanel: React.FC<PropsBase> = (_props: PropsBase) => {\n  const props = (defaultValue && _props) as Props;\n  const { data, loading } = useQuery(GET_CROSS_TAB_INFO, {\n    variables: {\n      primaryElementIds: props.primaryElements\n        .filter((item) =>\n          props.primaryFilter === null\n            ? 1\n            : item.choice?.label === props.primaryFilter ||\n              item.answer?.label === props.primaryFilter\n        )\n        .map((item) => item.id),\n      secondaryElementIds: props.secondaryElements.map((item) => item.id),\n    },\n  });\n  const isLoading = isLoadingVar()['plot'];\n\n  useEffect(() => {\n    isLoadingVar({ ...isLoadingVar(), plot: loading });\n  }, [loading]);\n\n  const plotData = useCrossTabData(props, data?.crossTabRecordInfo);\n\n  const leftOffset = props.primaryElements\n    .map(\n      (item) =>\n        (\n          item[props.primaryFilter !== null ? 'answer' : 'choice']?.details ||\n          item[props.primaryFilter !== null ? 'answer' : 'choice']?.label ||\n          'no label'\n        ).length\n    )\n    .reduce((curr, prev) => (curr > prev ? curr : prev), 0);\n\n  return (\n    <LoadedScreen loading={isLoading || plotData === undefined}>\n      <TwoColumnCard title={'Plot'}>\n        <View width={'100%'} height={'70vh'}>\n          {plotData ? (\n            <ResponsiveHeatMap\n              data={plotData}\n              indexBy={'primary'}\n              keys={props.secondaryElements.map((item) => item.choice.label)}\n              margin={{\n                top: 60,\n                right: 60,\n                bottom: 60,\n                left: 60 + leftOffset * 5,\n              }}\n              axisLeft={{\n                legend: 'primary',\n                legendPosition: 'middle',\n                legendOffset: -40 - leftOffset * 5,\n              }}\n              axisTop={null}\n              axisBottom={{\n                legend: 'secondary',\n                legendPosition: 'middle',\n                legendOffset: 40,\n              }}\n            />\n          ) : null}\n        </View>\n      </TwoColumnCard>\n    </LoadedScreen>\n  );\n};\nHeatMapPanel.defaultProps = defaultValue;\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\utils\\getBasicStats.tsx",["170"],"export const getBasicStats = (questionDetails: any) => ({\n  ID: questionDetails.id,\n  QID: questionDetails.qid,\n  Tag: questionDetails.tag,\n  Description: questionDetails.text,\n  Type: questionDetails.type,\n});\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\localState\\index.ts",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\LoadingScreen.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\LoadedScreen.tsx",["171","172","173","174"],"import {\n  Grid,\n  IllustratedMessage,\n  ProgressCircle,\n  Heading,\n} from '@adobe/react-spectrum';\nimport { motion } from 'framer-motion';\nimport React from 'react';\nimport { useMeasure } from 'react-use';\nimport { LoadingScreen } from './LoadingScreen';\n\nexport type LoadedScreenProps = React.PropsWithChildren<{\n  loading: boolean;\n  size?: string;\n}>;\n\nexport const LoadedScreen: React.FC<LoadedScreenProps> = (\n  props: LoadedScreenProps\n) => {\n  const [ref, dimension] = useMeasure<HTMLDivElement>();\n  return (\n    <>\n      <LoadingScreen\n        loading={props.loading}\n        dimension={dimension}\n        size={props.size as 'S' | 'M' | 'L'}\n      />\n      <motion.div\n        animate={{\n          opacity: -((props.loading ? 1 : 0) - 1),\n        }}\n        initial={{\n          opacity: 0,\n        }}\n      >\n        <div ref={ref}>{props.children}</div>\n      </motion.div>\n    </>\n  );\n};\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\ExplorePanel.tsx",["175","176"],"import {\n  ActionButton,\n  Grid,\n  Heading,\n  Text,\n  repeat,\n  Flex,\n  Footer,\n} from '@adobe/react-spectrum';\nimport Axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { isLoadingVar, selectedQuestionVar } from '../../localState';\nimport { TwoColumnCard } from '../utils/TwoColumnCard';\nimport { LoadedScreen } from './LoadedScreen';\n\nexport type ExplorePanelProps = { text: string };\n\nexport const ExplorePanel: React.FC<ExplorePanelProps> = (\n  props: ExplorePanelProps\n) => {\n  const [searchedQuestions, setSearchedQuestions] = useState([] as any[]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    Axios.get('http://localhost:7071/api/HttpTrigger1', {\n      params: {\n        query: props.text,\n      },\n    }).then((response) => {\n      setSearchedQuestions(response.data);\n      setIsLoading(false);\n    });\n  }, [props.text]);\n\n  return (\n    <LoadedScreen loading={isLoading}>\n      <TwoColumnCard title={'Similar-Questions'}>\n        <Grid\n          columns={repeat('auto-fit', 'size-6000')}\n          autoRows={'size-1200'}\n          minHeight={'size-2000'}\n          gap={'size-200'}\n        >\n          {searchedQuestions\n            .filter((item) => item.text !== props.text)\n            .map((item) => (\n              <ActionButton\n                height={'size-1200'}\n                UNSAFE_style={{ cursor: 'pointer' }}\n                onPressEnd={() => {\n                  isLoadingVar({ ...isLoadingVar(), panel: true });\n                  selectedQuestionVar(item.id);\n                }}\n              >\n                {\n                  <Flex\n                    columnGap={'size-100'}\n                    alignContent={'center'}\n                    direction={'column'}\n                    margin={'size-200'}\n                    UNSAFE_style={{\n                      overflow: 'hidden',\n                      textOverflow: 'ellipsis',\n                    }}\n                  >\n                    <Heading level={3} margin={0}>\n                      {item.name}\n                    </Heading>\n                    <Text>{item.text}</Text>\n                    <Text UNSAFE_style={{ opacity: 0.6 }}>\n                      Similarity: {Number(item.score).toFixed(3)}\n                    </Text>\n                  </Flex>\n                }\n              </ActionButton>\n            ))}\n        </Grid>\n      </TwoColumnCard>\n    </LoadedScreen>\n  );\n};\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\Footer.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\QuestionSearch.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\TH.tsx",[],{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":9,"column":3,"nodeType":"183","messageId":"184","endLine":9,"endColumn":10},{"ruleId":"185","severity":1,"message":"186","line":53,"column":68,"nodeType":"187","messageId":"188","endLine":53,"endColumn":71,"suggestions":"189"},{"ruleId":"185","severity":1,"message":"186","line":132,"column":57,"nodeType":"187","messageId":"188","endLine":132,"endColumn":60,"suggestions":"190"},{"ruleId":"181","severity":1,"message":"191","line":2,"column":24,"nodeType":"183","messageId":"184","endLine":2,"endColumn":31},{"ruleId":"181","severity":1,"message":"192","line":3,"column":10,"nodeType":"183","messageId":"184","endLine":3,"endColumn":19},{"ruleId":"181","severity":1,"message":"193","line":6,"column":3,"nodeType":"183","messageId":"184","endLine":6,"endColumn":22},{"ruleId":"185","severity":1,"message":"186","line":20,"column":12,"nodeType":"187","messageId":"188","endLine":20,"endColumn":15,"suggestions":"194"},{"ruleId":"185","severity":1,"message":"186","line":38,"column":38,"nodeType":"187","messageId":"188","endLine":38,"endColumn":41,"suggestions":"195"},{"ruleId":"185","severity":1,"message":"186","line":50,"column":68,"nodeType":"187","messageId":"188","endLine":50,"endColumn":71,"suggestions":"196"},{"ruleId":"185","severity":1,"message":"186","line":65,"column":20,"nodeType":"187","messageId":"188","endLine":65,"endColumn":23,"suggestions":"197"},{"ruleId":"185","severity":1,"message":"186","line":109,"column":73,"nodeType":"187","messageId":"188","endLine":109,"endColumn":76,"suggestions":"198"},{"ruleId":"185","severity":1,"message":"186","line":121,"column":46,"nodeType":"187","messageId":"188","endLine":121,"endColumn":49,"suggestions":"199"},{"ruleId":"181","severity":1,"message":"200","line":5,"column":3,"nodeType":"183","messageId":"184","endLine":5,"endColumn":8},{"ruleId":"181","severity":1,"message":"201","line":6,"column":3,"nodeType":"183","messageId":"184","endLine":6,"endColumn":13},{"ruleId":"181","severity":1,"message":"202","line":10,"column":18,"nodeType":"183","messageId":"184","endLine":10,"endColumn":25},{"ruleId":"181","severity":1,"message":"203","line":3,"column":17,"nodeType":"183","messageId":"184","endLine":3,"endColumn":26},{"ruleId":"181","severity":1,"message":"204","line":3,"column":8,"nodeType":"183","messageId":"184","endLine":3,"endColumn":17},{"ruleId":"181","severity":1,"message":"205","line":4,"column":8,"nodeType":"183","messageId":"184","endLine":4,"endColumn":19},{"ruleId":"181","severity":1,"message":"206","line":7,"column":21,"nodeType":"183","messageId":"184","endLine":7,"endColumn":51},{"ruleId":"181","severity":1,"message":"207","line":1,"column":10,"nodeType":"183","messageId":"184","endLine":1,"endColumn":14},{"ruleId":"181","severity":1,"message":"208","line":8,"column":10,"nodeType":"183","messageId":"184","endLine":8,"endColumn":24},{"ruleId":"185","severity":1,"message":"186","line":53,"column":52,"nodeType":"187","messageId":"188","endLine":53,"endColumn":55,"suggestions":"209"},{"ruleId":"210","severity":1,"message":"211","line":80,"column":6,"nodeType":"212","endLine":80,"endColumn":12,"suggestions":"213"},{"ruleId":"185","severity":1,"message":"186","line":1,"column":48,"nodeType":"187","messageId":"188","endLine":1,"endColumn":51,"suggestions":"214"},{"ruleId":"181","severity":1,"message":"207","line":2,"column":3,"nodeType":"183","messageId":"184","endLine":2,"endColumn":7},{"ruleId":"181","severity":1,"message":"215","line":3,"column":3,"nodeType":"183","messageId":"184","endLine":3,"endColumn":21},{"ruleId":"181","severity":1,"message":"216","line":4,"column":3,"nodeType":"183","messageId":"184","endLine":4,"endColumn":17},{"ruleId":"181","severity":1,"message":"191","line":5,"column":3,"nodeType":"183","messageId":"184","endLine":5,"endColumn":10},{"ruleId":"181","severity":1,"message":"217","line":8,"column":3,"nodeType":"183","messageId":"184","endLine":8,"endColumn":9},{"ruleId":"185","severity":1,"message":"186","line":21,"column":68,"nodeType":"187","messageId":"188","endLine":21,"endColumn":71,"suggestions":"218"},"no-native-reassign",["219"],"no-negated-in-lhs",["220"],"@typescript-eslint/no-unused-vars","'makeVar' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["221","222"],["223","224"],"'Heading' is defined but never used.","'useButton' is defined but never used.","'queryForQuestionVar' is defined but never used.",["225","226"],["227","228"],["229","230"],["231","232"],["233","234"],["235","236"],"'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'Element' is defined but never used.","'useEffect' is defined but never used.","'ArrowLeft' is defined but never used.","'ChevronLeft' is defined but never used.","'selectedQuestionForCrossTabVar' is defined but never used.","'Grid' is defined but never used.","'getItemDetails' is defined but never used.",["237","238"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getLabel', 'props.primaryElements', and 'props.secondaryElements'. Either include them or remove the dependency array. If 'setCrossTabData' needs the current value of 'props.primaryElements', you can also switch to useReducer instead of useState and read 'props.primaryElements' in the reducer.","ArrayExpression",["239"],["240","241"],"'IllustratedMessage' is defined but never used.","'ProgressCircle' is defined but never used.","'Footer' is defined but never used.",["242","243"],"no-global-assign","no-unsafe-negation",{"messageId":"244","fix":"245","desc":"246"},{"messageId":"247","fix":"248","desc":"249"},{"messageId":"244","fix":"250","desc":"246"},{"messageId":"247","fix":"251","desc":"249"},{"messageId":"244","fix":"252","desc":"246"},{"messageId":"247","fix":"253","desc":"249"},{"messageId":"244","fix":"254","desc":"246"},{"messageId":"247","fix":"255","desc":"249"},{"messageId":"244","fix":"256","desc":"246"},{"messageId":"247","fix":"257","desc":"249"},{"messageId":"244","fix":"258","desc":"246"},{"messageId":"247","fix":"259","desc":"249"},{"messageId":"244","fix":"260","desc":"246"},{"messageId":"247","fix":"261","desc":"249"},{"messageId":"244","fix":"262","desc":"246"},{"messageId":"247","fix":"263","desc":"249"},{"messageId":"244","fix":"264","desc":"246"},{"messageId":"247","fix":"265","desc":"249"},{"desc":"266","fix":"267"},{"messageId":"244","fix":"268","desc":"246"},{"messageId":"247","fix":"269","desc":"249"},{"messageId":"244","fix":"270","desc":"246"},{"messageId":"247","fix":"271","desc":"249"},"suggestUnknown",{"range":"272","text":"273"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"272","text":"274"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"275","text":"273"},{"range":"275","text":"274"},{"range":"276","text":"273"},{"range":"276","text":"274"},{"range":"277","text":"273"},{"range":"277","text":"274"},{"range":"278","text":"273"},{"range":"278","text":"274"},{"range":"279","text":"273"},{"range":"279","text":"274"},{"range":"280","text":"273"},{"range":"280","text":"274"},{"range":"281","text":"273"},{"range":"281","text":"274"},{"range":"282","text":"273"},{"range":"282","text":"274"},"Update the dependencies array to be: [data, getLabel, props.primaryElements, props.secondaryElements]",{"range":"283","text":"284"},{"range":"285","text":"273"},{"range":"285","text":"274"},{"range":"286","text":"273"},{"range":"286","text":"274"},[1464,1467],"unknown","never",[3863,3866],[700,703],[1100,1103],[1542,1545],[1996,1999],[3576,3579],[3915,3918],[1477,1480],[2399,2405],"[data, getLabel, props.primaryElements, props.secondaryElements]",[47,50],[576,579]]