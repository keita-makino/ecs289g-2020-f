[{"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\index.tsx":"1","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\serviceWorker.ts":"2","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\App.tsx":"3","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\pages\\Index.tsx":"4","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\templates\\Main.tsx":"5","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\organisms\\Sidebar.tsx":"6","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\organisms\\QuestionDetailsPanel.tsx":"7","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\QuestionList.tsx":"8","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\QuestionListItem.tsx":"9","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\BasicStats.tsx":"10","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\AnswerList.tsx":"11","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\EditButton.tsx":"12","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\ChoiceList.tsx":"13","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\AnswerListItem.tsx":"14","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\BasicStatsItem.tsx":"15","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\ChoiceListItem.tsx":"16","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\Body.tsx":"17","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\utils\\ScrollableList.tsx":"18","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\utils\\TwoColumnCard.tsx":"19","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\ActionPanel.tsx":"20","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\QuestionTitle.tsx":"21","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\organisms\\CrossTabPanel.tsx":"22","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\CrossTabQuestions.tsx":"23","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\ActionTrigger.tsx":"24","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\HeatMapPanel.tsx":"25","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\utils\\getBasicStats.tsx":"26","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\localState\\index.ts":"27","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\LoadingScreen.tsx":"28","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\LoadedScreen.tsx":"29","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\ExplorePanel.tsx":"30","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\Footer.tsx":"31","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\QuestionSearch.tsx":"32","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\TH.tsx":"33"},{"size":452,"mtime":1607086848000,"results":"34","hashOfConfig":"35"},{"size":5206,"mtime":1607089658882,"results":"36","hashOfConfig":"35"},{"size":744,"mtime":1608065675080,"results":"37","hashOfConfig":"35"},{"size":311,"mtime":1608065551546,"results":"38","hashOfConfig":"35"},{"size":1849,"mtime":1608078638021,"results":"39","hashOfConfig":"35"},{"size":1777,"mtime":1608114520287,"results":"40","hashOfConfig":"35"},{"size":3161,"mtime":1608142930943,"results":"41","hashOfConfig":"35"},{"size":4235,"mtime":1608123764989,"results":"42","hashOfConfig":"35"},{"size":3716,"mtime":1608120303898,"results":"43","hashOfConfig":"35"},{"size":1175,"mtime":1608062602851,"results":"44","hashOfConfig":"35"},{"size":4006,"mtime":1608137145109,"results":"45","hashOfConfig":"35"},{"size":1654,"mtime":1608123767548,"results":"46","hashOfConfig":"35"},{"size":2606,"mtime":1608134004513,"results":"47","hashOfConfig":"35"},{"size":2331,"mtime":1608134855891,"results":"48","hashOfConfig":"35"},{"size":1064,"mtime":1607842013363,"results":"49","hashOfConfig":"35"},{"size":1467,"mtime":1608137084526,"results":"50","hashOfConfig":"35"},{"size":243,"mtime":1607836096598,"results":"51","hashOfConfig":"35"},{"size":641,"mtime":1607889466487,"results":"52","hashOfConfig":"35"},{"size":809,"mtime":1608064210839,"results":"53","hashOfConfig":"35"},{"size":939,"mtime":1608075309859,"results":"54","hashOfConfig":"35"},{"size":1760,"mtime":1608124678454,"results":"55","hashOfConfig":"35"},{"size":3172,"mtime":1608077300718,"results":"56","hashOfConfig":"35"},{"size":1509,"mtime":1608065746743,"results":"57","hashOfConfig":"35"},{"size":2148,"mtime":1608110364826,"results":"58","hashOfConfig":"35"},{"size":3983,"mtime":1608077877231,"results":"59","hashOfConfig":"35"},{"size":211,"mtime":1608055954815,"results":"60","hashOfConfig":"35"},{"size":1584,"mtime":1608137091747,"results":"61","hashOfConfig":"35"},{"size":1394,"mtime":1608124401601,"results":"62","hashOfConfig":"35"},{"size":903,"mtime":1608124456468,"results":"63","hashOfConfig":"35"},{"size":2457,"mtime":1608110148874,"results":"64","hashOfConfig":"35"},{"size":226,"mtime":1607321277456,"results":"65","hashOfConfig":"66"},{"size":1129,"mtime":1608110925467,"results":"67","hashOfConfig":"35"},{"size":1354,"mtime":1608130066271,"results":"68","hashOfConfig":"35"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"8ee5wv",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"71"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"71"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"71"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"71"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"71"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"71"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"71"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"71"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"71"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"71"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"71"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"71"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lml4fe",{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\index.tsx",[],["148","149"],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\serviceWorker.ts",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\App.tsx",["150"],"import React from 'react';\nimport './App.css';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n  HttpLink,\n  ApolloProvider,\n  makeVar,\n} from '@apollo/client';\nimport Index from './pages/Index';\nimport { hot } from 'react-hot-loader';\nimport { fields } from './localState';\n\nconst cache = new InMemoryCache({\n  resultCaching: true,\n  typePolicies: {\n    Query: {\n      fields,\n    },\n  },\n});\nconst link = new HttpLink({\n  uri: 'http://localhost:4000/graphql',\n});\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  resolvers: {},\n  link,\n});\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Index />\n    </ApolloProvider>\n  );\n};\n\nexport default hot(module)(App);\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\pages\\Index.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\templates\\Main.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\organisms\\Sidebar.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\organisms\\QuestionDetailsPanel.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\QuestionList.tsx",["151","152"],"import React, { useEffect, useState } from 'react';\nimport { Flex, Heading, View, Divider } from '@adobe/react-spectrum';\nimport {\n  QuestionListItem,\n  listItemDefaultValue,\n  ListItemProps,\n} from '../atoms/QuestionListItem';\nimport { gql, useQuery, useReactiveVar } from '@apollo/client';\nimport { Scrollbar } from 'react-scrollbars-custom';\nimport Axios from 'axios';\nimport {\n  isEditingVar,\n  isLoadingVar,\n  queryForQuestionVar,\n} from '../../localState';\nimport { LoadedScreen } from './LoadedScreen';\n\ntype PropsBase = {\n  name?: string;\n  questions?: ListItemProps[];\n  level?: number;\n};\nexport const defaultValue = {\n  name: 'no title',\n  questions: [listItemDefaultValue],\n  level: 0,\n};\nconst PropsDefault: Required<\n  Pick<PropsBase, { [Key in keyof PropsBase]-?: Key }[keyof PropsBase]>\n> = defaultValue;\ntype Props = PropsBase & typeof PropsDefault;\n\nexport { defaultValue as questionListDefaultValue };\nexport type QuestionListProps = Props;\n\nconst QUERY = gql`\n  query {\n    sections(orderBy: [{ name: asc }]) {\n      name\n      questions(orderBy: [{ name: asc }]) {\n        id\n        text\n        name\n      }\n    }\n  }\n`;\n\nexport const QuestionList: React.FC<PropsBase> = (_props: PropsBase) => {\n  const { data, loading, refetch } = useQuery(QUERY);\n  const [sections, setSections] = useState([defaultValue]);\n  const queryForQuestion = useReactiveVar(queryForQuestionVar);\n  const [searchedQuestions, setSearchedQuestions] = useState([] as any[]);\n  const isEditing = useReactiveVar(isEditingVar);\n\n  useEffect(() => {\n    if (data) {\n      setSections(data.sections);\n      isLoadingVar({ ...isLoadingVar(), questionTitle: false });\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if (!loading) {\n      isLoadingVar({ ...isLoadingVar(), main: false });\n    }\n  }, [loading]);\n\n  useEffect(() => {\n    if (!isEditing['questionTitle']) {\n      console.log();\n      refetch();\n    }\n  }, [isEditing, refetch]);\n\n  useEffect(() => {\n    if (queryForQuestion && queryForQuestion.length > 0) {\n      isLoadingVar({ ...isLoadingVar(), search: true });\n      Axios.get('http://localhost:7071/api/HttpTrigger1', {\n        params: {\n          query: queryForQuestion,\n        },\n      }).then((response) => {\n        setSearchedQuestions(response.data);\n        isLoadingVar({ ...isLoadingVar(), search: false });\n      });\n    }\n  }, [queryForQuestion]);\n\n  return (\n    <View\n      width={'100%'}\n      height={'100%'}\n      paddingTop={'size-200'}\n      paddingBottom={'size-200'}\n    >\n      <Scrollbar style={{ width: '100%', height: '100%' }} noScrollX>\n        {queryForQuestion ? (\n          <LoadedScreen loading={isLoadingVar()['search']}>\n            <Flex direction={'column'} minHeight={'size-5000'}>\n              {searchedQuestions.map((item) => (\n                <QuestionListItem {...item} />\n              ))}\n            </Flex>\n          </LoadedScreen>\n        ) : sections ? (\n          <Flex direction={'column'} rowGap={'size-100'}>\n            {sections.map((section) => (\n              <View width={'100%'}>\n                {!section.level ? (\n                  <>\n                    <Heading level={3} margin={0}>\n                      {section.name}\n                    </Heading>\n                  </>\n                ) : (\n                  <></>\n                )}\n                <Flex>\n                  <Flex width={'size-200'}>\n                    <Divider\n                      orientation={'vertical'}\n                      size={'S'}\n                      UNSAFE_style={{ marginLeft: '0.35rem' }}\n                    />\n                  </Flex>\n                  <View\n                    width={'100%'}\n                    paddingStart={'size-50'}\n                    paddingEnd={'size-200'}\n                  >\n                    <Flex direction={'column'} width={'100%'}>\n                      {section.questions.map((question: any) => (\n                        <QuestionListItem {...question} />\n                      ))}\n                    </Flex>\n                  </View>\n                </Flex>\n              </View>\n            ))}\n          </Flex>\n        ) : (\n          <></>\n        )}\n      </Scrollbar>\n    </View>\n  );\n};\nQuestionList.defaultProps = defaultValue;\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\QuestionListItem.tsx",["153","154","155"],"import React, { useRef } from 'react';\nimport { Flex, Header, Heading, Text, View } from '@adobe/react-spectrum';\nimport { useButton, usePress } from 'react-aria';\nimport {\n  isLoadingVar,\n  queryForQuestionVar,\n  selectedActionVar,\n  selectedQuestionForCrossTabVar,\n  selectedQuestionVar,\n} from '../../localState';\nimport { useReactiveVar } from '@apollo/client';\nimport Checkmark from '@spectrum-icons/workflow/Checkmark';\n\ntype PropsBase = {\n  id?: string;\n  size?: number;\n  name?: string | null;\n  text?: string;\n  level?: number;\n  children?: Props[];\n  isSearched?: boolean;\n};\nexport const defaultValue = {\n  id: '',\n  size: 12,\n  name: 'no name',\n  text: 'no text',\n  level: 0,\n  children: [],\n  isSearched: false,\n};\nconst PropsDefault: Required<\n  Pick<PropsBase, { [Key in keyof PropsBase]-?: Key }[keyof PropsBase]>\n> = defaultValue;\ntype Props = PropsBase & typeof PropsDefault;\n\nexport { defaultValue as listItemDefaultValue };\nexport type ListItemProps = Props;\n\nexport const QuestionListItem: React.FC<PropsBase> = (_props: PropsBase) => {\n  const props = (defaultValue && _props) as Props;\n  const ref = useRef(null);\n  const { pressProps, isPressed } = usePress({\n    onPressEnd: () => {\n      if (isSelectingSecondary) {\n        selectedQuestionForCrossTabVar(props.id);\n        isLoadingVar({ ...isLoadingVar(), crossTab: true });\n      } else {\n        selectedQuestionVar(props.id);\n        isLoadingVar({ ...isLoadingVar(), panel: true });\n      }\n    },\n  });\n\n  const selectedQuestion = useReactiveVar(selectedQuestionVar);\n  const selectedQuestionForCrossTab = useReactiveVar(\n    selectedQuestionForCrossTabVar\n  );\n  const selectedAction = useReactiveVar(selectedActionVar);\n  const isSelectingSecondary = selectedAction === 'CrossTab';\n\n  return (\n    <Flex direction={'column'}>\n      <View padding={'size-25'}>\n        <View\n          backgroundColor={\n            selectedQuestion === props.id ||\n            selectedQuestionForCrossTab === props.id\n              ? 'gray-500'\n              : 'transparent'\n          }\n          borderRadius={'small'}\n        >\n          <div\n            {...pressProps}\n            ref={ref}\n            style={{\n              background: isPressed ? 'rgba(0,0,0,0.2)' : 'rgba(255,255,255,0)',\n              padding: '0.2rem',\n              paddingLeft: '0.5rem',\n              cursor: 'pointer',\n            }}\n            role={'gridcell'}\n          >\n            <Flex alignItems={'center'} columnGap={'size-100'}>\n              <Header\n                margin={0}\n                marginStart={`size-${props.level}00`}\n                UNSAFE_style={{\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {props.name}\n              </Header>\n              <Text\n                marginStart={`size-${props.level}00`}\n                UNSAFE_style={{\n                  opacity: 0.6,\n                  whiteSpace: 'nowrap',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                }}\n              >\n                {props.text}\n              </Text>\n              {selectedQuestion === props.id ? (\n                <Flex minWidth={'size-300'}>\n                  <Checkmark size={'S'} color={'positive'} />\n                </Flex>\n              ) : (\n                <></>\n              )}\n              {selectedQuestionForCrossTab === props.id ? (\n                <Flex minWidth={'size-300'}>\n                  <Checkmark size={'S'} color={'notice'} />\n                </Flex>\n              ) : (\n                <></>\n              )}\n            </Flex>\n          </div>\n        </View>\n      </View>\n    </Flex>\n  );\n};\nQuestionListItem.defaultProps = defaultValue;\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\BasicStats.tsx",["156"],"import { Flex } from '@adobe/react-spectrum';\nimport React from 'react';\nimport { BasicStatsItem, BasicStatsItemProps } from '../atoms/BasicStatsItem';\nimport { TwoColumnCard } from '../utils/TwoColumnCard';\n\ntype PropsBase = Object;\nexport const defaultValue = [];\nconst PropsDefault: Required<\n  Pick<PropsBase, { [Key in keyof PropsBase]-?: Key }[keyof PropsBase]>\n> = defaultValue;\ntype Props = PropsBase & typeof PropsDefault;\n\nexport { defaultValue as basicStatsDefaultValue };\nexport type BasicStatsProps = Props;\n\nexport const BasicStats: React.FC<PropsBase> = (_props: PropsBase) => {\n  const props = (defaultValue && _props) as Props;\n\n  const items = Object.entries(props).map(\n    (item: any): BasicStatsItemProps => ({\n      heading: item[0],\n      text: item[1],\n    })\n  );\n\n  return items.length > 0 ? (\n    <TwoColumnCard title={'Basic Info'}>\n      <Flex\n        gridArea={'contents'}\n        direction={'column'}\n        marginTop={'size-50'}\n        marginBottom={'size-50'}\n      >\n        {items.map((item) => (\n          <BasicStatsItem {...item} />\n        ))}\n      </Flex>\n    </TwoColumnCard>\n  ) : null;\n};\nBasicStats.defaultProps = defaultValue;\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\AnswerList.tsx",["157","158","159","160","161","162","163"],"import {\n  Grid,\n  Flex,\n  Heading,\n  Divider,\n  ActionButton,\n} from '@adobe/react-spectrum';\nimport { useReactiveVar } from '@apollo/client';\nimport ChevronDown from '@spectrum-icons/workflow/ChevronDown';\nimport ChevronUp from '@spectrum-icons/workflow/ChevronUp';\nimport ChevronUpDown from '@spectrum-icons/workflow/ChevronUpDown';\nimport React, { useState } from 'react';\nimport { Element } from '../../@types';\nimport { filterVar, sortByVar } from '../../localState';\nimport { AnswerListItem } from '../atoms/AnswerListItem';\nimport { TH } from '../atoms/TH';\nimport { ScrollableList } from '../utils/ScrollableList';\nimport { TwoColumnCard } from '../utils/TwoColumnCard';\n\ntype PropsBase = {\n  elements: Element[];\n  isTextEntry?: boolean;\n};\nexport const defaultValue = {\n  elements: [],\n  isTextEntry: false,\n};\nconst PropsDefault: Required<\n  Pick<PropsBase, { [Key in keyof PropsBase]-?: Key }[keyof PropsBase]>\n> = defaultValue;\ntype Props = PropsBase & typeof PropsDefault;\n\nexport { defaultValue as answerListDefaultValue };\nexport type AnswerListProps = Props;\n\nexport const AnswerList: React.FC<PropsBase> = (_props: PropsBase) => {\n  const props = (defaultValue && _props) as Props;\n  const sortBy = useReactiveVar(sortByVar);\n  const filter = useReactiveVar(filterVar);\n\n  const max = props.elements.reduce(\n    (prev: number, curr: { records: string | any[] }) =>\n      curr.records.length > prev ? curr.records.length : prev,\n    0\n  );\n\n  return (\n    <TwoColumnCard title={'Answers'}>\n      <Flex\n        gridArea={'contents'}\n        direction={'column'}\n        marginTop={'size-50'}\n        marginBottom={'size-50'}\n      >\n        <Grid\n          areas={['value  label  records', 'divider  divider  divider']}\n          columns={['size-1200', 'size-5000', 'auto']}\n          columnGap={'size-200'}\n        >\n          <TH label={'value'} target={'answer'} />\n          <TH label={'label'} target={'answer'} />\n          <TH label={'records'} target={'answer'} />\n          <Divider size={'S'} gridArea={'divider'} />\n        </Grid>\n        <ScrollableList height={'30rem'}>\n          {props.elements.length > 0 ? (\n            [...props.elements]\n              .sort((a, b) => {\n                if (sortBy['answer']['by']) {\n                  const by = sortBy['answer'].by;\n                  const asc = sortBy['answer'].asc;\n                  if (by === 'value' || by === 'label') {\n                    return asc\n                      ? a[by] < b[by]\n                        ? -1\n                        : 1\n                      : a[by] > b[by]\n                      ? -1\n                      : 1;\n                  } else {\n                    return asc\n                      ? a['records'].length < b['records'].length\n                        ? -1\n                        : 1\n                      : a['records'].length > b['records'].length\n                      ? -1\n                      : 1;\n                  }\n                } else {\n                  return 1;\n                }\n              })\n              .map((element: Element) =>\n                props.isTextEntry ? (\n                  <AnswerListItem\n                    contents={{\n                      ...{\n                        ...element,\n                        records: element.records.filter((record) =>\n                          filter\n                            ? record.elements\n                                .map((item) => item.id)\n                                .includes(filter)\n                            : true\n                        ),\n                      },\n                      label: element.details?.text || 'no entry',\n                    }}\n                    max={max}\n                  />\n                ) : (\n                  <AnswerListItem contents={element} max={max} />\n                )\n              )\n          ) : (\n            <></>\n          )}\n        </ScrollableList>\n      </Flex>\n    </TwoColumnCard>\n  );\n};\nAnswerList.defaultProps = defaultValue;\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\EditButton.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\ChoiceList.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\AnswerListItem.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\BasicStatsItem.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\ChoiceListItem.tsx",["164","165"],"import React from 'react';\nimport {\n  Flex,\n  Grid,\n  Radio,\n  RadioGroup,\n  Switch,\n  Text,\n} from '@adobe/react-spectrum';\nimport { Element } from '../../@types';\nimport { filterVar } from '../../localState';\n\ntype Props = {\n  contents: Element;\n};\nexport const defaultValue = {\n  contents: { id: 'no id', value: 0, label: 'no text', records: [] },\n};\n\nexport const ChoiceListItem: React.FC<Props> = (props: Props) => {\n  return (\n    <Grid\n      areas={['value  label  filter']}\n      columns={['size-1200', 'auto', 'size-2000']}\n      gap={'size-200'}\n    >\n      <Flex gridArea={'value'}>\n        <Text marginTop={'size-50'} marginBottom={'size-50'}>\n          {props.contents.value}\n        </Text>\n      </Flex>\n      <Flex gridArea={'label'}>\n        <Text\n          marginTop={'size-50'}\n          marginBottom={'size-50'}\n          UNSAFE_style={{\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          {props.contents.label}\n        </Text>\n      </Flex>\n      <Flex gridArea={'filter'} UNSAFE_style={{ cursor: 'pointer' }}>\n        <Switch\n          aria-label={props.contents.label}\n          onChange={(isSelected: boolean) => {\n            if (isSelected) {\n              filterVar(null);\n            } else {\n              filterVar(props.contents.id);\n            }\n          }}\n        />\n      </Flex>\n    </Grid>\n  );\n};\nChoiceListItem.defaultProps = defaultValue;\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\Body.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\utils\\ScrollableList.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\utils\\TwoColumnCard.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\ActionPanel.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\QuestionTitle.tsx",["166"],"import { Flex, Heading, Divider, TextField } from '@adobe/react-spectrum';\nimport { gql, useQuery, useReactiveVar } from '@apollo/client';\nimport React, { useEffect, useState } from 'react';\nimport {\n  isEditingVar,\n  isLoadingVar,\n  selectedQuestionVar,\n} from '../../localState';\nimport { EditButton } from '../atoms/EditButton';\nimport { LoadedScreen } from './LoadedScreen';\n\nexport type QuestionTitleProps = {};\n\nconst QUERY = gql`\n  query GET_QUESTION($id: String!) {\n    question(where: { id: $id }) {\n      id\n      name\n    }\n  }\n`;\n\nexport const QuestionTitle: React.FC<QuestionTitleProps> = (\n  props: QuestionTitleProps\n) => {\n  const selectedQuestion = useReactiveVar(selectedQuestionVar);\n  const isEditing = useReactiveVar(isEditingVar)['questionTitle'];\n  const isLoading = useReactiveVar(isLoadingVar)['questionTitle'];\n\n  const { data } = useQuery(QUERY, {\n    variables: { id: selectedQuestion },\n  });\n\n  const [text, setText] = useState<string | undefined>(undefined);\n\n  return (\n    <>\n      <Flex justifyContent={'start'} minWidth={'size-3600'}>\n        <LoadedScreen loading={isLoading} size={'M'}>\n          <Flex direction={'row'} alignItems={'center'} height={'size-1000'}>\n            {isEditing ? (\n              <TextField\n                label={null}\n                value={text}\n                placeholder={'New Name'}\n                onChange={(e) => {\n                  setText(e);\n                }}\n              />\n            ) : (\n              <Heading level={1} margin={0}>\n                {data?.question?.name}\n              </Heading>\n            )}\n            <EditButton text={text} id={data?.question?.id} />\n          </Flex>\n        </LoadedScreen>\n      </Flex>\n      <Divider size={'M'} />\n    </>\n  );\n};\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\organisms\\CrossTabPanel.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\CrossTabQuestions.tsx",["167","168","169"],"import { Flex, Grid, Heading } from '@adobe/react-spectrum';\nimport { useReactiveVar } from '@apollo/client';\nimport ArrowLeft from '@spectrum-icons/workflow/ArrowLeft';\nimport ChevronLeft from '@spectrum-icons/workflow/ChevronLeft';\nimport Close from '@spectrum-icons/workflow/Close';\nimport React from 'react';\nimport { selectedQuestionForCrossTabVar } from '../../localState';\nimport { Body } from '../atoms/Body';\n\nexport type CrossTabQuestionsProps = { primary?: string; secondary?: string };\n\nexport const CrossTabQuestions: React.FC<CrossTabQuestionsProps> = (\n  props: CrossTabQuestionsProps\n) => {\n  const isReady = useReactiveVar(selectedQuestionForCrossTabVar) !== null;\n  return (\n    <Grid areas={['primary', 'cross', 'secondary']}>\n      <Flex direction={'row'} alignItems={'baseline'}>\n        <Heading\n          marginTop={'size-50'}\n          marginBottom={'size-50'}\n          marginEnd={'size-100'}\n          level={3}\n        >\n          Primary:\n        </Heading>\n        <Body>{props.primary}</Body>\n      </Flex>\n      <Flex marginTop={'size-50'} marginBottom={'size-50'}>\n        <Close UNSAFE_style={{ opacity: 0.3 }} size={'L'} />\n      </Flex>\n      <Flex direction={'row'} alignItems={'baseline'} position={'relative'}>\n        <Heading\n          marginTop={'size-50'}\n          marginBottom={'size-50'}\n          marginEnd={'size-100'}\n          level={3}\n        >\n          Secondary:\n        </Heading>\n        <Body>{props.secondary}</Body>\n      </Flex>\n    </Grid>\n  );\n};\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\ActionTrigger.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\HeatMapPanel.tsx",["170","171","172","173"],"import { Grid, View } from '@adobe/react-spectrum';\nimport { gql, useQuery } from '@apollo/client';\nimport { ResponsiveHeatMap } from '@nivo/heatmap';\nimport React, { useEffect, useState } from 'react';\nimport { Element } from '../../@types';\nimport { isLoadingVar } from '../../localState';\nimport { TwoColumnCard } from '../utils/TwoColumnCard';\nimport { LoadedScreen } from './LoadedScreen';\n\ntype PropsBase = { primaryElements: Element[]; secondaryElements: Element[] };\nexport const defaultValue = { primaryElements: [], secondaryElements: [] };\nconst PropsDefault: Required<\n  Pick<PropsBase, { [Key in keyof PropsBase]-?: Key }[keyof PropsBase]>\n> = defaultValue;\ntype Props = PropsBase & typeof PropsDefault;\n\nexport { defaultValue as heatMapPanelDefaultValue };\nexport type HeatMapPanelProps = Props;\n\nconst GET_CROSS_TAB_INFO = gql`\n  query($primaryElementIds: [String!]!, $secondaryElementIds: [String!]!) {\n    crossTabRecordInfo(\n      primaryElementIds: $primaryElementIds\n      secondaryElementIds: $secondaryElementIds\n    ) {\n      primaryId\n      secondaryId\n      records {\n        id\n      }\n    }\n  }\n`;\n\ntype CrossTabRecordInfo = {\n  primaryId: string;\n  secondaryId: string;\n  records: {\n    id: string;\n  }[];\n}[];\n\nconst getLabel = (elements: Element[], id: string) =>\n  elements.find((item) => item.id === id)?.label || 'no label';\nconst getValue = (elements: Element[], id: string) =>\n  elements.find((item) => item.id === id)?.value || 0;\n\nconst useCrossTabData = (props: PropsBase, data: CrossTabRecordInfo) => {\n  const [crossTabData, setCrossTabData] = useState<any>();\n\n  useEffect(() => {\n    if (data) {\n      const primaryIds = data\n        .map((item) => item.primaryId)\n        .filter((item, index, array) => array.indexOf(item) === index);\n      setCrossTabData(\n        primaryIds.map((id) => {\n          const array = data.filter((item) => item.primaryId === id);\n          return array.reduce(\n            (prev, curr) => ({\n              ...prev,\n              [getLabel(props.secondaryElements, curr.secondaryId)]: curr\n                .records.length,\n            }),\n            { primary: getLabel(props.primaryElements, id) }\n          );\n        })\n      );\n    }\n  }, [data]);\n\n  return crossTabData;\n};\n\nexport const HeatMapPanel: React.FC<PropsBase> = (_props: PropsBase) => {\n  const props = (defaultValue && _props) as Props;\n  const { data, loading } = useQuery(GET_CROSS_TAB_INFO, {\n    variables: {\n      primaryElementIds: props.primaryElements.map((item) => item.id),\n      secondaryElementIds: props.secondaryElements.map((item) => item.id),\n    },\n  });\n  const isLoading = isLoadingVar()['plot'];\n\n  useEffect(() => {\n    isLoadingVar({ ...isLoadingVar(), plot: loading });\n  }, [loading]);\n\n  const plotData = useCrossTabData(props, data?.crossTabRecordInfo);\n\n  const leftOffset = props.primaryElements\n    .map((item) => item.label.length)\n    .reduce((curr, prev) => (curr > prev ? curr : prev), 0);\n\n  return (\n    <LoadedScreen loading={isLoading || plotData === undefined}>\n      <TwoColumnCard title={'Plot'}>\n        <View width={'100%'} height={'70vh'}>\n          {plotData ? (\n            <ResponsiveHeatMap\n              data={plotData}\n              indexBy={'primary'}\n              keys={props.secondaryElements.map((item) => item.label)}\n              margin={{\n                top: 60,\n                right: 60,\n                bottom: 60,\n                left: 60 + leftOffset * 5,\n              }}\n              axisLeft={{\n                legend: 'primary',\n                legendPosition: 'middle',\n                legendOffset: -40 - leftOffset * 5,\n              }}\n              axisTop={null}\n              axisBottom={{\n                legend: 'secondary',\n                legendPosition: 'middle',\n                legendOffset: 40,\n              }}\n            />\n          ) : null}\n        </View>\n      </TwoColumnCard>\n    </LoadedScreen>\n  );\n};\nHeatMapPanel.defaultProps = defaultValue;\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\utils\\getBasicStats.tsx",["174"],"export const getBasicStats = (questionDetails: any) => ({\n  ID: questionDetails.id,\n  QID: questionDetails.qid,\n  Tag: questionDetails.tag,\n  Description: questionDetails.text,\n  Type: questionDetails.type,\n});\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\localState\\index.ts",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\LoadingScreen.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\LoadedScreen.tsx",["175","176","177","178"],"import {\n  Grid,\n  IllustratedMessage,\n  ProgressCircle,\n  Heading,\n} from '@adobe/react-spectrum';\nimport { motion } from 'framer-motion';\nimport React from 'react';\nimport { useMeasure } from 'react-use';\nimport { LoadingScreen } from './LoadingScreen';\n\nexport type LoadedScreenProps = React.PropsWithChildren<{\n  loading: boolean;\n  size?: string;\n}>;\n\nexport const LoadedScreen: React.FC<LoadedScreenProps> = (\n  props: LoadedScreenProps\n) => {\n  const [ref, dimension] = useMeasure<HTMLDivElement>();\n  return (\n    <>\n      <LoadingScreen\n        loading={props.loading}\n        dimension={dimension}\n        size={props.size as 'S' | 'M' | 'L'}\n      />\n      <motion.div\n        animate={{\n          opacity: -((props.loading ? 1 : 0) - 1),\n        }}\n        initial={{\n          opacity: 0,\n        }}\n      >\n        <div ref={ref}>{props.children}</div>\n      </motion.div>\n    </>\n  );\n};\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\ExplorePanel.tsx",["179","180"],"import {\n  ActionButton,\n  Grid,\n  Heading,\n  Text,\n  repeat,\n  Flex,\n  Footer,\n} from '@adobe/react-spectrum';\nimport Axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { isLoadingVar, selectedQuestionVar } from '../../localState';\nimport { TwoColumnCard } from '../utils/TwoColumnCard';\nimport { LoadedScreen } from './LoadedScreen';\n\nexport type ExplorePanelProps = { text: string };\n\nexport const ExplorePanel: React.FC<ExplorePanelProps> = (\n  props: ExplorePanelProps\n) => {\n  const [searchedQuestions, setSearchedQuestions] = useState([] as any[]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    Axios.get('http://localhost:7071/api/HttpTrigger1', {\n      params: {\n        query: props.text,\n      },\n    }).then((response) => {\n      setSearchedQuestions(response.data);\n      setIsLoading(false);\n    });\n  }, [props.text]);\n\n  return (\n    <LoadedScreen loading={isLoading}>\n      <TwoColumnCard title={'Similar-Questions'}>\n        <Grid\n          columns={repeat('auto-fit', 'size-6000')}\n          autoRows={'size-1200'}\n          minHeight={'size-2000'}\n          gap={'size-200'}\n        >\n          {searchedQuestions\n            .filter((item) => item.text !== props.text)\n            .map((item) => (\n              <ActionButton\n                height={'size-1200'}\n                UNSAFE_style={{ cursor: 'pointer' }}\n                onPressEnd={() => {\n                  isLoadingVar({ ...isLoadingVar(), panel: true });\n                  selectedQuestionVar(item.id);\n                }}\n              >\n                {\n                  <Flex\n                    columnGap={'size-100'}\n                    alignContent={'center'}\n                    direction={'column'}\n                    margin={'size-200'}\n                    UNSAFE_style={{\n                      overflow: 'hidden',\n                      textOverflow: 'ellipsis',\n                    }}\n                  >\n                    <Heading level={3} margin={0}>\n                      {item.name}\n                    </Heading>\n                    <Text>{item.text}</Text>\n                    <Text UNSAFE_style={{ opacity: 0.6 }}>\n                      Similarity: {Number(item.score).toFixed(3)}\n                    </Text>\n                  </Flex>\n                }\n              </ActionButton>\n            ))}\n        </Grid>\n      </TwoColumnCard>\n    </LoadedScreen>\n  );\n};\n","C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\molecules\\Footer.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\QuestionSearch.tsx",[],"C:\\Users\\apricot\\src\\kemakino\\Class\\ECS289G-2020\\ecs289g-2020-f\\client\\src\\components\\atoms\\TH.tsx",[],{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":9,"column":3,"nodeType":"187","messageId":"188","endLine":9,"endColumn":10},{"ruleId":"189","severity":1,"message":"190","line":53,"column":68,"nodeType":"191","messageId":"192","endLine":53,"endColumn":71,"suggestions":"193"},{"ruleId":"189","severity":1,"message":"190","line":133,"column":57,"nodeType":"191","messageId":"192","endLine":133,"endColumn":60,"suggestions":"194"},{"ruleId":"185","severity":1,"message":"195","line":2,"column":24,"nodeType":"187","messageId":"188","endLine":2,"endColumn":31},{"ruleId":"185","severity":1,"message":"196","line":3,"column":10,"nodeType":"187","messageId":"188","endLine":3,"endColumn":19},{"ruleId":"185","severity":1,"message":"197","line":6,"column":3,"nodeType":"187","messageId":"188","endLine":6,"endColumn":22},{"ruleId":"189","severity":1,"message":"190","line":20,"column":12,"nodeType":"191","messageId":"192","endLine":20,"endColumn":15,"suggestions":"198"},{"ruleId":"185","severity":1,"message":"195","line":4,"column":3,"nodeType":"187","messageId":"188","endLine":4,"endColumn":10},{"ruleId":"185","severity":1,"message":"199","line":6,"column":3,"nodeType":"187","messageId":"188","endLine":6,"endColumn":15},{"ruleId":"185","severity":1,"message":"200","line":9,"column":8,"nodeType":"187","messageId":"188","endLine":9,"endColumn":19},{"ruleId":"185","severity":1,"message":"201","line":10,"column":8,"nodeType":"187","messageId":"188","endLine":10,"endColumn":17},{"ruleId":"185","severity":1,"message":"202","line":11,"column":8,"nodeType":"187","messageId":"188","endLine":11,"endColumn":21},{"ruleId":"185","severity":1,"message":"203","line":12,"column":17,"nodeType":"187","messageId":"188","endLine":12,"endColumn":25},{"ruleId":"189","severity":1,"message":"190","line":42,"column":46,"nodeType":"191","messageId":"192","endLine":42,"endColumn":49,"suggestions":"204"},{"ruleId":"185","severity":1,"message":"205","line":5,"column":3,"nodeType":"187","messageId":"188","endLine":5,"endColumn":8},{"ruleId":"185","severity":1,"message":"206","line":6,"column":3,"nodeType":"187","messageId":"188","endLine":6,"endColumn":13},{"ruleId":"185","severity":1,"message":"207","line":3,"column":17,"nodeType":"187","messageId":"188","endLine":3,"endColumn":26},{"ruleId":"185","severity":1,"message":"208","line":3,"column":8,"nodeType":"187","messageId":"188","endLine":3,"endColumn":17},{"ruleId":"185","severity":1,"message":"209","line":4,"column":8,"nodeType":"187","messageId":"188","endLine":4,"endColumn":19},{"ruleId":"185","severity":1,"message":"210","line":15,"column":9,"nodeType":"187","messageId":"188","endLine":15,"endColumn":16},{"ruleId":"185","severity":1,"message":"211","line":1,"column":10,"nodeType":"187","messageId":"188","endLine":1,"endColumn":14},{"ruleId":"185","severity":1,"message":"212","line":45,"column":7,"nodeType":"187","messageId":"188","endLine":45,"endColumn":15},{"ruleId":"189","severity":1,"message":"190","line":49,"column":52,"nodeType":"191","messageId":"192","endLine":49,"endColumn":55,"suggestions":"213"},{"ruleId":"214","severity":1,"message":"215","line":70,"column":6,"nodeType":"216","endLine":70,"endColumn":12,"suggestions":"217"},{"ruleId":"189","severity":1,"message":"190","line":1,"column":48,"nodeType":"191","messageId":"192","endLine":1,"endColumn":51,"suggestions":"218"},{"ruleId":"185","severity":1,"message":"211","line":2,"column":3,"nodeType":"187","messageId":"188","endLine":2,"endColumn":7},{"ruleId":"185","severity":1,"message":"219","line":3,"column":3,"nodeType":"187","messageId":"188","endLine":3,"endColumn":21},{"ruleId":"185","severity":1,"message":"220","line":4,"column":3,"nodeType":"187","messageId":"188","endLine":4,"endColumn":17},{"ruleId":"185","severity":1,"message":"195","line":5,"column":3,"nodeType":"187","messageId":"188","endLine":5,"endColumn":10},{"ruleId":"185","severity":1,"message":"221","line":8,"column":3,"nodeType":"187","messageId":"188","endLine":8,"endColumn":9},{"ruleId":"189","severity":1,"message":"190","line":21,"column":68,"nodeType":"191","messageId":"192","endLine":21,"endColumn":71,"suggestions":"222"},"no-native-reassign",["223"],"no-negated-in-lhs",["224"],"@typescript-eslint/no-unused-vars","'makeVar' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["225","226"],["227","228"],"'Heading' is defined but never used.","'useButton' is defined but never used.","'queryForQuestionVar' is defined but never used.",["229","230"],"'ActionButton' is defined but never used.","'ChevronDown' is defined but never used.","'ChevronUp' is defined but never used.","'ChevronUpDown' is defined but never used.","'useState' is defined but never used.",["231","232"],"'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'useEffect' is defined but never used.","'ArrowLeft' is defined but never used.","'ChevronLeft' is defined but never used.","'isReady' is assigned a value but never used.","'Grid' is defined but never used.","'getValue' is assigned a value but never used.",["233","234"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.primaryElements' and 'props.secondaryElements'. Either include them or remove the dependency array. If 'setCrossTabData' needs the current value of 'props.primaryElements', you can also switch to useReducer instead of useState and read 'props.primaryElements' in the reducer.","ArrayExpression",["235"],["236","237"],"'IllustratedMessage' is defined but never used.","'ProgressCircle' is defined but never used.","'Footer' is defined but never used.",["238","239"],"no-global-assign","no-unsafe-negation",{"messageId":"240","fix":"241","desc":"242"},{"messageId":"243","fix":"244","desc":"245"},{"messageId":"240","fix":"246","desc":"242"},{"messageId":"243","fix":"247","desc":"245"},{"messageId":"240","fix":"248","desc":"242"},{"messageId":"243","fix":"249","desc":"245"},{"messageId":"240","fix":"250","desc":"242"},{"messageId":"243","fix":"251","desc":"245"},{"messageId":"240","fix":"252","desc":"242"},{"messageId":"243","fix":"253","desc":"245"},{"desc":"254","fix":"255"},{"messageId":"240","fix":"256","desc":"242"},{"messageId":"243","fix":"257","desc":"245"},{"messageId":"240","fix":"258","desc":"242"},{"messageId":"243","fix":"259","desc":"245"},"suggestUnknown",{"range":"260","text":"261"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"260","text":"262"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"263","text":"261"},{"range":"263","text":"262"},{"range":"264","text":"261"},{"range":"264","text":"262"},{"range":"265","text":"261"},{"range":"265","text":"262"},{"range":"266","text":"261"},{"range":"266","text":"262"},"Update the dependencies array to be: [data, props.primaryElements, props.secondaryElements]",{"range":"267","text":"268"},{"range":"269","text":"261"},{"range":"269","text":"262"},{"range":"270","text":"261"},{"range":"270","text":"262"},[1464,1467],"unknown","never",[3884,3887],[700,703],[1372,1375],[1593,1596],[2218,2224],"[data, props.primaryElements, props.secondaryElements]",[47,50],[576,579]]